install.packages("slidify")
install.packages("ggplot2")
library(ggplot2)
install.packages{KenSmooth}
install.packages{"KenSmooth"}
install.packages("KenSmooth")
install.packages("KernSmooth")
library(KernSmooth)
which R
m <- matrix(nrow = 2, ncol = 3)
m
dim(m)
attributes(m)
m <- matrix(1:6, nrow = 2, ncol = 3)
m
L <- 1:10
dim(L) <- c(2,5)
L
x <- 1:3
y <- 10:12
L <- cbind(x,y)
L
L <- rbind(x,y)
L
x <- factor(c("yes","yes","no","yes","no"))
x
table(x)
unclass(x)
levels = c("yes","no")
x
x <- factor(c("yes","yes","no","yes","no"),levels=c("yes","no"))
x
is.na(x)
is.nan(x)
x <- c(1, 2, NA, 10, 3)
is.na(x)
is.nan(x)
add2 <- function(x, y) {
x + y
}
add2(3, 5)
above <- function(x, n){
use <- x > n
x[use]
}
x <- 1:20
above(x, 12)
above <- function(x, n = 10){
use <- x > n
x[use]
}
above(x)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc) {
means[i] <- mean(y[, i])
}
means
}
x <- as.Date("1970-01-01")
x
unclass(x)
unclass(as.Date("2015-10-15"))
}
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {x <- 0}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
d = 3L
d
is.integer(d)
setwd("~/Dropbox/Coursera_data_science/R_programming/Assignment2/ProgrammingAssignment2")
source(“cachematrix.R”)
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
## First let's initialize a null matrix.
inverse_matrix <- matrix()
## Set the length of the inverse_matrix to be the
## same as the input matrix x.
length(inverse_matrix) <- length(x)
## Now set the dimensions of the inverse_matrix to be the same as
## the input matrix x.
dim(inverse_matrix) <- c(sqrt(length(x)),sqrt(length(x)))
## Create a function to set the length of the inverse_matrix to be the
## same as the input matrix x.
set <- function(y) {
x <<- y
inverse_matrix <<- matrix()
length(inverse_matrix) <<- length(y)
dim(inverse_matrix) <<- c(sqrt(length(y)),sqrt(length(y)))
print(inverse_matrix)
print(y)
print(x)
}
## print(inverse_matrix)
## print(x)
get <- function() x
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
inverse_matrix <- null
inverse_matrix <- NULL
x <- matrix(c(1,2,3,4), nrow=2, ncol=2)
length(inverse_matrix) <- length(x)
dim(inverse_matrix) <- c(sqrt(length(x)),sqrt(length(x)))
inverse_matrix <- matrix()
length(inverse_matrix) <- length(x)
dim(inverse_matrix) <- c(sqrt(length(x)),sqrt(length(x)))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
## First let's initialize a null matrix.
inverse_matrix <- matrix()
## Set the length of the inverse_matrix to be the
## same as the input matrix x.
## length(inverse_matrix) <- length(x)
## Now set the dimensions of the inverse_matrix to be the same as
## the input matrix x.
## dim(inverse_matrix) <- c(sqrt(length(x)),sqrt(length(x)))
## Create a function to set the length of the inverse_matrix to be the
## same as the input matrix x.
set <- function(y) {
x <<- y
inverse_matrix <<- matrix()
## length(inverse_matrix) <<- length(y)
## dim(inverse_matrix) <<- c(sqrt(length(y)),sqrt(length(y)))
}
## print(inverse_matrix)
## print(x)
get <- function() x
setinverse <- function(solve) inverse_matrix <<- solve
getinverse <- function() inverse_matrix
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
## First let's initialize a null matrix.
inverse_matrix <- matrix()
## Set the length of the inverse_matrix to be the
## same as the input matrix x.
## length(inverse_matrix) <- length(x)
## Now set the dimensions of the inverse_matrix to be the same as
## the input matrix x.
## dim(inverse_matrix) <- c(sqrt(length(x)),sqrt(length(x)))
## Create a function to set the length of the inverse_matrix to be the
## same as the input matrix x.
set <- function(y) {
x <<- y
inverse_matrix <<- matrix()
## length(inverse_matrix) <<- length(y)
## dim(inverse_matrix) <<- c(sqrt(length(y)),sqrt(length(y)))
}
## print(inverse_matrix)
## print(x)
get <- function() x
setinverse <- function(solve) inverse_matrix <<- solve
getinverse <- function() inverse_matrix
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
## First let's initialize a null matrix.
inverse_matrix <- matrix()
## Create a function to set the length of the inverse_matrix to be the
## same as the input matrix x.
set <- function(y) {
x <<- y
inverse_matrix <<- matrix()
}
get <- function() x
setinverse <- function(solve) inverse_matrix <<- solve
getinverse <- function() inverse_matrix
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'.
inverse_matrix <- x$getinverse()
if(!is.null(inverse_matrix)) {
message("getting cached inverse matrix")
return(inverse_matrix)
}
data <- x$get()
inverse_matrix <- solve(data, ...)
x$setinverse(inverse_matrix)
inverse_matrix
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
## First let's initialize a null matrix.
inverse_matrix <- matrix()
## Create a function to set the length of the inverse_matrix to be the
## same as the input matrix x.
set <- function(y) {
x <<- y
inverse_matrix <<- matrix()
}
get <- function() x
setinverse <- function(solve) inverse_matrix <<- solve
getinverse <- function() inverse_matrix
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'.
inverse_matrix <- x$getinverse()
if(!is.null(inverse_matrix)) {
message("getting cached inverse matrix")
return(inverse_matrix)
}
data <- x$get()
inverse_matrix <- solve(data, ...)
x$setinverse(inverse_matrix)
inverse_matrix
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
print(is.null(inverse_matrix))
print(is.na(inverse_matrix))
print(!is.na(inverse_matrix))
print(!is.null(inverse_matrix))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
## First let's initialize a NA matrix.
inverse_matrix <- matrix()
## Create a function to set the length of the inverse_matrix to be the
## same as the input matrix x.
set <- function(y) {
x <<- y
inverse_matrix <<- matrix()
}
get <- function() x
setinverse <- function(solve) inverse_matrix <<- solve
getinverse <- function() inverse_matrix
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'.
inverse_matrix <- x$getinverse()
if(!is.na(inverse_matrix)) {
message("getting cached inverse matrix")
return(inverse_matrix)
}
data <- x$get()
inverse_matrix <- solve(data, ...)
x$setinverse(inverse_matrix)
inverse_matrix
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
cacheSolve(amatrix)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
## First let's initialize a NA matrix.
inverse_matrix <- matrix()
## Create a function to set the length of the inverse_matrix to be the
## same as the input matrix x.
set <- function(y) {
x <<- y
inverse_matrix <<- matrix()
}
get <- function() x
setinverse <- function(solve) inverse_matrix <<- solve
getinverse <- function() inverse_matrix
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'.
inverse_matrix <- x$getinverse()
## if(!is.na(inverse_matrix)) {
if(!complete.cases(inverse_matrix)) {
message("getting cached inverse matrix")
return(inverse_matrix)
}
data <- x$get()
inverse_matrix <- solve(data, ...)
x$setinverse(inverse_matrix)
inverse_matrix
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
## First let's initialize a NA matrix.
inverse_matrix <- matrix()
## Create a function to set the length of the inverse_matrix to be the
## same as the input matrix x.
set <- function(y) {
x <<- y
inverse_matrix <<- matrix()
}
get <- function() x
setinverse <- function(solve) inverse_matrix <<- solve
getinverse <- function() inverse_matrix
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'.
inverse_matrix <- x$getinverse()
## if(!is.na(inverse_matrix)) {
if(!complete.cases(inverse_matrix)) {
message("getting cached inverse matrix")
return(inverse_matrix)
}
data <- x$get()
inverse_matrix <- solve(data, ...)
x$setinverse(inverse_matrix)
inverse_matrix
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
## First let's initialize a NA matrix.
inverse_matrix <- matrix()
## Create a function to set the length of the inverse_matrix to be the
## same as the input matrix x.
set <- function(y) {
x <<- y
inverse_matrix <<- matrix()
}
get <- function() x
setinverse <- function(solve) inverse_matrix <<- solve
getinverse <- function() inverse_matrix
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'.
inverse_matrix <- x$getinverse()
## if(!is.na(inverse_matrix)) {
if(complete.cases(inverse_matrix)) {
message("getting cached inverse matrix")
return(inverse_matrix)
}
data <- x$get()
inverse_matrix <- solve(data, ...)
x$setinverse(inverse_matrix)
inverse_matrix
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
source(“cachematrix.R”)
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
l <- matrix(c(NA, NA, NA, NA), nrow=2, ncol=2)
print(complete.cases(l))
print(sapply(complete.cases(l))
)
print(complete.cases(l)[1])
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
